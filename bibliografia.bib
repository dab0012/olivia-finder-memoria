@book{sametinger1997software,
  title     = {Software Engineering with Reusable Components},
  author    = {Sametinger, J.},
  isbn      = {9783540626954},
  lccn      = {97011976},
  url       = {https://books.google.es/books?id=AxPQvGRs2wUC},
  year      = {1997},
  publisher = {Springer Berlin Heidelberg}
}

@inproceedings{BoldiPaolo2019,
  author    = {Boldi, Paolo},
  booktitle = {2019 IEEE First International Conference on Cognitive Machine Intelligence (CogMI)},
  title     = {How Network Analysis Can Improve the Reliability of Modern Software Ecosystems},
  year      = {2019},
  volume    = {},
  number    = {},
  pages     = {168-172},
  doi       = {10.1109/CogMI48466.2019.00032}
}

@inproceedings{10.1145/3106237.3106267,
  author    = {Abdalkareem, Rabe and Nourry, Olivier and Wehaibi, Sultan and Mujahid, Suhaib and Shihab, Emad},
  title     = {Why Do Developers Use Trivial Packages? An Empirical Case Study on Npm},
  year      = {2017},
  isbn      = {9781450351058},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3106237.3106267},
  doi       = {10.1145/3106237.3106267},
  abstract  = {Code reuse is traditionally seen as good practice. Recent trends have pushed the concept of code reuse to an extreme, by using packages that implement simple and trivial tasks, which we call `trivial packages'. A recent incident where a trivial package led to the breakdown of some of the most popular web applications such as Facebook and Netflix made it imperative to question the growing use of trivial packages. Therefore, in this paper, we mine more than 230,000 npm packages and 38,000 JavaScript applications in order to study the prevalence of trivial packages. We found that trivial packages are common and are increasing in popularity, making up 16.8\% of the studied npm packages. We performed a survey with 88 Node.js developers who use trivial packages to understand the reasons and drawbacks of their use. Our survey revealed that trivial packages are used because they are perceived to be well implemented and tested pieces of code. However, developers are concerned about maintaining and the risks of breakages due to the extra dependencies trivial packages introduce. To objectively verify the survey results, we empirically validate the most cited reason and drawback and find that, contrary to developers' beliefs, only 45.2\% of trivial packages even have tests. However, trivial packages appear to be `deployment tested' and to have similar test, usage and community interest as non-trivial packages. On the other hand, we found that 11.5\% of the studied trivial packages have more than 20 dependencies. Hence, developers should be careful about which trivial packages they decide to use.},
  booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
  pages     = {385–395},
  numpages  = {11},
  keywords  = {Empirical Studies, JavaScript, Node.js, Code Reuse},
  location  = {Paderborn, Germany},
  series    = {ESEC/FSE 2017}
}

@inproceedings{10.5555/2820518.2820524,
  author    = {Abate, Pietro and Di Cosmo, Roberto and Gesbert, Louis and Le Fessant, Fabrice and Treinen, Ralf and Zacchiroli, Stefano},
  title     = {Mining Component Repositories for Installability Issues},
  year      = {2015},
  isbn      = {9780769555942},
  publisher = {IEEE Press},
  abstract  = {Component repositories play an increasingly relevant role in software life-cycle management, from software distribution to end-user, to deployment and upgrade management. Software components shipped via such repositories are equipped with rich metadata that describe their relationship (e.g., dependencies and conflicts) with other components.In this practice paper we show how to use a tool, distcheck, that uses component metadata to identify all the components in a repository that cannot be installed (e.g., due to unsatisfiable dependencies), provides detailed information to help developers understanding the cause of the problem, and fix it in the repository.We report about detailed analyses of several repositories: the Debian distribution, the OPAM package collection, and Drupal modules. In each case, distcheck is able to efficiently identify not installable components and provide valuable explanations of the issues. Our experience provides solid ground for generalizing the use of distcheck to other component repositories.},
  booktitle = {Proceedings of the 12th Working Conference on Mining Software Repositories},
  pages     = {24–33},
  numpages  = {10},
  location  = {Florence, Italy},
  series    = {MSR '15}
}

@inproceedings{5316017,
  author    = {Abate, Pietro and Di Cosmo, Roberto and Boender, Jaap and Zacchiroli, Stefano},
  booktitle = {2009 3rd International Symposium on Empirical Software Engineering and Measurement},
  title     = {Strong dependencies between software components},
  year      = {2009},
  volume    = {},
  number    = {},
  pages     = {89-99},
  doi       = {10.1109/ESEM.2009.5316017}
}

  @inproceedings{10.1145/3196398.3196401,
  author    = {Decan, Alexandre and Mens, Tom and Constantinou, Eleni},
  title     = {On the Impact of Security Vulnerabilities in the Npm Package Dependency Network},
  year      = {2018},
  isbn      = {9781450357166},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3196398.3196401},
  doi       = {10.1145/3196398.3196401},
  abstract  = {Security vulnerabilities are among the most pressing problems in open source software package libraries. It may take a long time to discover and fix vulnerabilities in packages. In addition, vulnerabilities may propagate to dependent packages, making them vulnerable too. This paper presents an empirical study of nearly 400 security reports over a 6-year period in the npm dependency network containing over 610k JavaScript packages. Taking into account the severity of vulnerabilities, we analyse how and when these vulnerabilities are discovered and fixed, and to which extent they affect other packages in the packaging ecosystem in presence of dependency constraints. We report our findings and provide guidelines for package maintainers and tool developers to improve the process of dealing with security issues.},
  booktitle = {Proceedings of the 15th International Conference on Mining Software Repositories},
  pages     = {181–191},
  numpages  = {11},
  keywords  = {software ecosystem, semantic versioning, software repository mining, security vulnerability, dependency network},
  location  = {Gothenburg, Sweden},
  series    = {MSR '18}
}

@inproceedings{BogartChristopherKastner2015,
  author = {Bogart, Christopher and Kastner, Christian and Herbsleb, James},
  year   = {2015},
  month  = {11},
  pages  = {86-89},
  title  = {When It Breaks, It Breaks: How Ecosystem Developers Reason about the Stability of Dependencies},
  doi    = {10.1109/ASEW.2015.21}
}

@inproceedings{7962360,
  author    = {Kikas, Riivo and Gousios, Georgios and Dumas, Marlon and Pfahl, Dietmar},
  booktitle = {2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)},
  title     = {Structure and Evolution of Package Dependency Networks},
  year      = {2017},
  volume    = {},
  number    = {},
  pages     = {102-112},
  doi       = {10.1109/MSR.2017.55}
}

@inproceedings{10.1145/2993412.3003382,
  author    = {Decan, Alexandre and Mens, Tom and Claes, Maelick},
  title     = {On the Topology of Package Dependency Networks: A Comparison of Three Programming Language Ecosystems},
  year      = {2016},
  isbn      = {9781450347815},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2993412.3003382},
  doi       = {10.1145/2993412.3003382},
  abstract  = {Package-based software ecosystems are composed of thousands of interdependent software packages. Many empirical studies have focused on software packages belonging to a single software ecosystem, and suggest to generalise the results to more ecosystems. We claim that such a generalisation is not always possible, because the technical structure of software ecosystems can be very different, even if these ecosystems belong to the same domain. We confirm this claim through a study of three big and popular package-based programming language ecosystems: R's CRAN archive network, Python's PyPI distribution, and JavaScript's NPM package manager. We study and compare the structure of their package dependency graphs and reveal some important differences that may make it difficult to generalise the findings of one ecosystem to another one.},
  booktitle = {Proccedings of the 10th European Conference on Software Architecture Workshops},
  articleno = {21},
  numpages  = {4},
  keywords  = {R, Python, JavaScript, software ecosystem, software distribution, component dependency graph},
  location  = {Copenhagen, Denmark},
  series    = {ECSAW '16}
}

@inproceedings{10.1109/SANER.2017.7884604,
  author = {Mens, Tom and Decan, Alexandre and Claes, Maelick},
  year   = {2017},
  month  = {02},
  pages  = {},
  title  = {An Empirical Comparison of Dependency Issues In OSS Packaging Ecosystems},
  doi    = {10.1109/SANER.2017.7884604}
}
@inproceedings{10.1109/SANER.2016.12,
  author = {Decan, Alexandre and Mens, Tom and Claes, Maelick and Grosjean, Philippe},
  year   = {2016},
  month  = {03},
  pages  = {},
  title  = {When GitHub meets CRAN: An Analysis of Inter-Repository Package Dependency Problems},
  doi    = {10.1109/SANER.2016.12}
}

@book{posfai2016network,
  title     = {Network Science},
  author    = {Posfai, Marton and Barabasi, Albert-Laszlo},
  year      = {2016},
  publisher = {Citeseer}
}

@inproceedings{10.1145/2901739.2901743,
  author    = {Wittern, Erik and Suter, Philippe and Rajagopalan, Shriram},
  title     = {A Look at the Dynamics of the JavaScript Package Ecosystem},
  year      = {2016},
  isbn      = {9781450341868},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2901739.2901743},
  doi       = {10.1145/2901739.2901743},
  abstract  = {The node package manager (npm) serves as the frontend to a large repository of JavaScript-based software packages, which foster the development of currently huge amounts of server-side Node. js and client-side JavaScript applications. In a span of 6 years since its inception, npm has grown to become one of the largest software ecosystems, hosting more than 230, 000 packages, with hundreds of millions of package installations every week. In this paper, we examine the npm ecosystem from two complementary perspectives: 1) we look at package descriptions, the dependencies among them, and download metrics, and 2) we look at the use of npm packages in publicly available applications hosted on GitHub. In both perspectives, we consider historical data, providing us with a unique view on the evolution of the ecosystem. We present analyses that provide insights into the ecosystem's growth and activity, into conflicting measures of package popularity, and into the adoption of package versions over time. These insights help understand the evolution of npm, design better package recommendation engines, and can help developers understand how their packages are being used.},
  booktitle = {Proceedings of the 13th International Conference on Mining Software Repositories},
  pages     = {351–361},
  numpages  = {11},
  keywords  = {software ecosystem analysis, Node.js, JavaScript},
  location  = {Austin, Texas},
  series    = {MSR '16}
}

@article{Albert2000,
  author  = {Réka Albert and Hawoong Jeong and Albert-László Barabási},
  doi     = {10.1038/35019019},
  issn    = {0028-0836},
  issue   = {6794},
  journal = {Nature},
  month   = {7},
  pages   = {378-382},
  title   = {Error and attack tolerance of complex networks},
  volume  = {406},
  year    = {2000}
}


@article{doi:10.1137/S003614450342480,
  author   = {Newman, M. E. J.},
  title    = {The Structure and Function of Complex Networks},
  journal  = {SIAM Review},
  volume   = {45},
  number   = {2},
  pages    = {167-256},
  year     = {2003},
  doi      = {10.1137/S003614450342480},
  url      = { 
              https://doi.org/10.1137/S003614450342480
              },
  eprint   = { 
              https://doi.org/10.1137/S003614450342480
              },
  abstract = { Inspired by empirical studies of networked systems such as the Internet, social networks, and biological networks, researchers have in recent years developed a variety of techniques and models to help us understand or predict the behavior of these systems. Here we review developments in this field, including such concepts as the small-world effect, degree distributions, clustering, network correlations, random graph models, models of network growth and preferential attachment, and dynamical processes taking place on networks. }
}

@software{daniel_2022_7358391,
  author    = {Daniel Seto},
  title     = {{dsr0018/olivia: OLIVIA - Open-source Library 
               Indexes Vulnerability Identification and Analysis}},
  month     = {nov},
  year      = {2022},
  publisher = {Zenodo},
  version   = {v1.0},
  doi       = {10.5281/zenodo.7358391},
  url       = {https://doi.org/10.5281/zenodo.7358391}
}

@dataset{jeremy_katz_2020_3626071,
  author    = {Jeremy Katz},
  title     = {{Libraries.io Open Source Repository and Dependency 
               Metadata}},
  month     = jan,
  year      = 2020,
  publisher = {Zenodo},
  version   = {1.6.0},
  doi       = {10.5281/zenodo.3626071},
  url       = {https://doi.org/10.5281/zenodo.3626071}
}

@inproceedings{Pageetal98,
  added-at  = {2008-01-09T21:02:24.000+0100},
  address   = {Brisbane, Australia},
  author    = {Page, L. and Brin, S. and Motwani, R. and Winograd, T.},
  biburl    = {https://www.bibsonomy.org/bibtex/2ac49c33e114ca171db40cece6a0ae4d6/sac},
  booktitle = {Proceedings of the 7th International World Wide Web Conference},
  interhash = {ca10cf0b0dd668c64b1f378ff0775849},
  intrahash = {ac49c33e114ca171db40cece6a0ae4d6},
  keywords  = {2007 kde pagerank seminar web},
  pages     = {161--172},
  timestamp = {2008-01-09T21:02:24.000+0100},
  title     = {The PageRank citation ranking: Bringing order to the Web},
  url       = {citeseer.nj.nec.com/page98pagerank.html},
  year      = 1998
}

@misc{enwiki:1160892030,
  author = {{Wikipedia contributors}},
  title  = {Power law --- {Wikipedia}{,} The Free Encyclopedia},
  year   = {2023},
  url    = {https://en.wikipedia.org/w/index.php?title=Power_law&oldid=1160892030},
  note   = {[Online; accessed 24-June-2023]}
}


@article{zerouali2022impact,
  title     = {On the impact of security vulnerabilities in the npm and rubygems dependency networks},
  author    = {Zerouali, Ahmed and Mens, Tom and Decan, Alexandre and De Roover, Coen},
  journal   = {Empirical Software Engineering},
  volume    = {27},
  number    = {5},
  pages     = {107},
  year      = {2022},
  publisher = {Springer}
}

@inproceedings{abate2020dependency,
  title        = {Dependency solving is still hard, but we are getting better at it},
  author       = {Abate, Pietro and Di Cosmo, Roberto and Gousios, Georgios and Zacchiroli, Stefano},
  booktitle    = {2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages        = {547--551},
  year         = {2020},
  organization = {IEEE}
}

@article{zerouali2021usage,
  title     = {On the usage of JavaScript, Python and Ruby packages in Docker Hub images},
  author    = {Zerouali, Ahmed and Mens, Tom and De Roover, Coen},
  journal   = {Science of Computer Programming},
  volume    = {207},
  pages     = {102653},
  year      = {2021},
  publisher = {Elsevier}
}

@inproceedings{richter2022tssb,
  title     = {TSSB-3M: Mining single statement bugs at massive scale},
  author    = {Richter, Cedric and Wehrheim, Heike},
  booktitle = {Proceedings of the 19th International Conference on Mining Software Repositories},
  pages     = {418--422},
  year      = {2022}
}

@inproceedings{stringer2020technical,
  title        = {Technical lag of dependencies in major package managers},
  author       = {Stringer, Jacob and Tahir, Amjed and Blincoe, Kelly and Dietrich, Jens},
  booktitle    = {2020 27th Asia-Pacific Software Engineering Conference (APSEC)},
  pages        = {228--237},
  year         = {2020},
  organization = {IEEE}
}

@inproceedings{pfeiffer2021identifying,
  title        = {Identifying critical projects via pagerank and truck factor},
  author       = {Pfeiffer, Rolf-Helge},
  booktitle    = {2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)},
  pages        = {41--45},
  year         = {2021},
  organization = {IEEE}
}


@inproceedings{zerouali2021identifying,
  title        = {Identifying versions of libraries used in stack overflow code snippets},
  author       = {Zerouali, Ahmed and Vel{\'a}zquez-Rodr{\'\i}guez, Camilo and De Roover, Coen},
  booktitle    = {2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)},
  pages        = {341--345},
  year         = {2021},
  organization = {IEEE}
}

@article{kannee2023intertwining,
  title   = {Intertwining Communities: Exploring Libraries that Cross Software Ecosystems},
  author  = {Kannee, Kanchanok and Kula, Raula Gaikovina and Wattanakriengkrai, Supatsara and Matsumoto, Kenichi},
  journal = {arXiv preprint arXiv:2303.09177},
  year    = {2023}
}

@misc{isoband_issue,
  title        = {Issue Comment: isoband},
  author       = {Unknown},
  howpublished = {\url{https://github.com/r-lib/isoband/issues/33#issuecomment-1270766150}},
  note         = {Acceso: 25 de junio de 2023}
}

@misc{r-bloggers_isoband_incident,
  title        = {CRAN and the isoband Incident: Is Your Project at Risk and How to Fix It},
  author       = {Unknown},
  howpublished = {\url{https://www.r-bloggers.com/2022/10/cran-and-the-isoband-incident-is-your-project-at-risk-and-how-to-fix-it/}},
  note         = {Acceso: 25 de junio de 2023}
}


@book{barabasi2016network,
  abstract    = {Networks are everywhere, from the Internet, to social networks, and the genetic networks that determine our biological existence. Illustrated throughout in full colour, this pioneering textbook, spanning a wide range of topics from physics to computer science, engineering, economics and the social sciences, introduces network science to an interdisciplinary audience. From the origins of the six degrees of separation to explaining why networks are robust to random failures, the author explores how viruses like Ebola and H1N1 spread, and why it is that our friends have more friends than we do. Using numerous real-world examples, this innovatively designed text includes clear delineation between undergraduate and graduate level material},
  added-at    = {2016-10-10T20:23:59.000+0200},
  address     = {Cambridge},
  author      = {Barabási, Albert-László and Pósfai, Márton},
  biburl      = {https://www.bibsonomy.org/bibtex/22a71231091413325c03aaed76c32a66b/schmitz},
  description = {Network Science: Albert-László Barabási: 9781107076266: Amazon.com: Books},
  interhash   = {2dcba3ae6b58627716c5d2a63f7c0855},
  intrahash   = {2a71231091413325c03aaed76c32a66b},
  isbn        = {9781107076266 1107076269},
  keywords    = {required sna snaseminar},
  publisher   = {Cambridge University Press},
  refid       = {958874494},
  timestamp   = {2016-12-18T12:26:46.000+0100},
  title       = {Network science},
  url         = {http://barabasi.com/networksciencebook/},
  year        = 2016
}

@article{Seto-Rey20231,
  author            = {Seto-Rey, Daniel and Santos-Martin, Jose Ignacio and Lopez-Nozal, Carlos},
  title             = {Vulnerability of Package Dependency Networks},
  year              = {2023},
  journal           = {IEEE Transactions on Network Science and Engineering},
  pages             = {1–13},
  doi               = {10.1109/TNSE.2023.3260880},
  url               = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85151539143&doi=10.1109%2fTNSE.2023.3260880&partnerID=40&md5=6686d56d005172f6027d6e3d9c36fd4a},
  type              = {Article},
  publication_stage = {Article in press},
  source            = {Scopus}
}

@misc{enwiki:1148363387,
  author = {{Wikipedia contributors}},
  title  = {Bow-tie diagram --- {Wikipedia}{,} The Free Encyclopedia},
  year   = {2023},
  url    = {https://en.wikipedia.org/w/index.php?title=Bow-tie_diagram&oldid=1148363387},
  note   = {[Online; accessed 2-July-2023]}
}